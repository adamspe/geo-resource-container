/*
 * app-container-geo
 * Version: 1.0.0 - 2017-01-26
 */
angular.module("app-container-geo.admin",["app-container-file"]).directive("layerAdmin",["$log","Layer","File","FileMeta","NotificationService",function(a,b,c,d,e){return{restrict:"E",templateUrl:"js/admin/layer-admin.html",scope:{},link:function(b,d,f){function g(){b.files=c.query({})}g(),b.fileResource=c,b.$watch("fileToUpload",function(a){console.log("fileToUpload",a),a&&a.file&&a.$save&&(a.metadata={index:0,foo:"bar",bool:!0},a.$save(function(a){b.uploadedFile=a,delete b.fileToUpload,g()}))}),b.$watch("uploadedFile",function(c){c&&("application/zip"!==c.contentType&&(e.addError({statusText:c.fileName+" is not a zip file."}),c.$remove({id:c._id},function(){a.debug("removed "+c.fileName),delete b.uploadedFile},e.addError)),console.log("uploadedFile",c))}),b.update=function(a){var b=new c(angular.extend({},a));b.metadata.index++,b.$update({id:a._id},g)},b.remove=function(b){new c(b).$remove({id:b._id},function(){a.debug("removed "+b.fileName),g()},e.addError)}}}}]),angular.module("app-container-geo",["app-container-common","templates-app-container-geo","app-container-geo.admin"]).service("Layer",["$appService",function(a){var b=a("geo/layer/:id");return b}]).service("Feature",["$appService",function(a){var b=a("geo/feature/:id");return b}]).factory("MapLayerService",["$q","MapLayer","Feature",function(a,b,c){return{getForPoint:function(d,e){var f=a.defer();return c.get({id:"containingPoint",lat:d,lon:e},function(a){f.resolve(new b(a.list))}),f.promise},getForFeature:function(d){var e=a.defer();return c.get({id:d},function(a){e.resolve(new b([a]))}),e.promise}}}]).factory("MapLayer",["$log","Layer","Feature",function(a,b,c){var d=d3.scaleOrdinal(d3.schemeCategory20),e={strokeColor:"#ffffff",strokeOpacity:null,strokeWeight:1,fillColor:"#aaaaaa",fillOpacity:null,zIndex:0,clickable:!0},f=function(a,b){this.$feature=a,this.$layer=b,this.$isOn=!0;var c=this,d=this.$properties={};a.forEachProperty(function(a,b){d[b]=a}),a.getMapFeature=function(){return c}},g=function(a){(this.$features=a||[]).forEach(function(a){var b=a.data.properties;b.$featureName=a.featureName,b.$layerName=a._layer.name,b.$layerId=a._layer._id,b.$featureId=a._id})};return f.prototype.getBounds=function(){if(!this.$bounds){var a=this.$bounds=new google.maps.LatLngBounds,b=this.$feature.getGeometry(),c=b.getType();if(c&&/Polygon/.test(c)){var d,e,f=b.getArray(),g="Polygon"===c?f:f.reduce(function(a,b){return a.push(b.getArray()[0]),a},[]);for(d=0;d<g.length;d++){var h=g[d].getArray();for(e=0;e<h.length;e++)a.extend(new google.maps.LatLng(h[e].lat(),h[e].lng()))}}}return this.$bounds},f.prototype.$area=function(){var a=this.getBounds(),b=a.getNorthEast(),c=a.getSouthWest();return Math.abs(b.lat()-c.lat())*Math.abs(b.lng()-c.lng())},f.prototype.fit=function(){this.$layer.map().fitBounds(this.getBounds())},f.prototype.on=function(){this.$isOn||(this.$layer.map().data.add(this.$feature),this.$isOn=!0)},f.prototype.off=function(){this.$isOn&&(this.$layer.map().data.remove(this.$feature),this.$isOn=!1)},f.prototype.isOn=function(){return this.$isOn},f.prototype.toggle=function(){return this[this.isOn()?"off":"on"](),this.isOn()},f.prototype.properties=function(){return this.$properties},f.prototype.name=function(){return this.$properties.$featureName},f.prototype.id=function(){return this.$properties.$featureId},f.prototype.layerId=function(){return this.$properties.$layerId},f.prototype.layerName=function(){return this.$properties.$layerName},f.prototype.getFeatureResource=function(){var a=this;return a.$featureResource||(a.$featureResource=c.get({id:a.id()}),a.$featureResource.$promise.then(function(b){b.getMapFeature=function(){return a}})),a.$featureResource.$promise},f.prototype.getLayerResource=function(){var a=this;return a.$layerResource||(a.$layerResource=b.get({id:a.layerId()}),a.$layerResource.$promise.then(function(b){b.getMapFeature=function(){return a}})),a.$layerResource.$promise},g.prototype.map=function(a){return arguments.length?(this.$map=a,this):this.$map},g.prototype.geoJson=function(){return{type:"FeatureCollection",features:this.$features.map(function(a){return a.data})}},g.prototype.add=function(){var b,c=this,g=c.map();return g&&!c.$mapFeatures&&(b=g.data.addGeoJson(c.geoJson()),c.$mapFeatures=b.map(function(a,b){return a.setProperty("$style",angular.extend({},e,{fillColor:d(b)})),new f(a,c)}),c.$mapFeatures.sort(function(a,b){return b.$area()-a.$area()}),c.$mapFeatures.forEach(function(a,b){var c=a.$feature.getProperty("$style");c.zIndex=b}),a.debug("feature stacking order",c.$mapFeatures.reduce(function(a,b){return a.push(b.layerName()+" : "+b.name()),a},[]).join(",")),g.data.setStyle(function(a){return a.getProperty("$style")})),c},g.prototype.fit=function(){return this.$mapFeatures&&this.$mapFeatures.length&&this.$mapFeatures[0].fit(),this},g.prototype.features=function(){return this.$mapFeatures||[]},g.prototype.remove=function(){return this.features().forEach(function(a){a.off()}),this},g}]),angular.module("templates-app-container-geo",["js/admin/layer-admin.html"]),angular.module("js/admin/layer-admin.html",[]).run(["$templateCache",function(a){a.put("js/admin/layer-admin.html",'<h1>Layer Administration</h1>\n<ul>\n    <li ng-repeat="f in files.list">\n        <a href ng-click="update(f)">{{f.filename}} ({{f.metadata.index}})</a>\n        <a href ng-click="remove(f)">X</a>\n    </li>\n</ul>\n<input type="file" file-model="fileToUpload" file-resource="fileResource" />\n')}]);