#!/usr/bin/env node

let argv = require('minimist')(process.argv.slice(2)),
    ShpFinder = require('./lib/shp-finder'),
    ShpTitles = require('./lib/shp-titles'),
    path = require('path'),
    fs = require('fs'),
    readline = require('readline'),
    PropertyFormatter = require('../../lib/property-formatter');

process.on('unhandledRejection',r => console.error(r));

function usage() {
    let scrpt = path.basename(__filename);
    console.log(`
    ${scrpt} [-d <directory>] -o <directory> [--script]
                -d: directory to search for shp files.
                -o: directory to write intermidiate data to.
     --maxFeatures: number of features to limit to one layer, large layers will be split into multiple (default: 5000)
     --maxAverageFeatureSize: size (kilobytes) to try to limit features to.
     --coordinatePrecision: number of decimal places of lat/lng to retain (default 5)
     --mergeLayers: path to previous layers.json to get formats from (and avoid re-prompting if tailoring seed with repeated runs).
         --nocleanup: do not cleanup intermediate files (for dev purposes).
          --script: if the script to import the seed should be generated
    The following are required to run --script
    [Note: these will be stored in plaintext in the generated script]
            --user: the username to login to the system with (admin role required
        --password: the password for --user

    E.g.
    -- generate a new seed like
    $ ${scrpt} -d ~/dirContainingShps -o ~/seed1

    -- process seed to generate script to import it like
    $ ${scrpt} -o ~/seed1 --script --user foo@bar.com --password secret
        `);
    process.exit(1);
}

let input_dir = argv['d'],
    output_dir = argv['o'],
    script = argv['script'];
if(!script && (!input_dir || !output_dir)) {
    usage();
} else if (script && !output_dir) {
    usage();
}

input_dir = input_dir ? path.resolve(input_dir) : undefined;
output_dir = path.resolve(output_dir);

let bootstrap = script ? generate_script : generate_seed;

Promise.all((script ? [output_dir] : [input_dir,output_dir]).map(d => {
    return new Promise(resolve => {
        fs.lstat(d,(err,stat) => {
            if(err || !stat.isDirectory()) {
                console.log(`${d} is not a directory`);
                usage();
            }
            resolve();
        })
    });
})).then(bootstrap);

function generate_script() {
    let user = argv['user'],
        pass = argv['password'];
    if(!user || !pass) {
        usage();
    }
    let layers,
        addScript = path.resolve(`${__dirname}/../../bin/add-layer`),
        importScript = path.resolve(`${output_dir}/import.sh`);
    try {
        layers = require(`${output_dir}/layers.json`);
    } catch(ex) {
        console.log(`No layers.json found in ${output_dir}`);
    }
    let script = fs.createWriteStream(importScript)
        .on('error',(e) => {
            console.log(e);
            process.exit(1);
        })
        .on('finish',() => {
            console.log(`${importScript}`);
            process.exit(0);
        });
    script.write("#!/bin/sh\n\n");
    layers.forEach(l => {
        l.layerSource = l.layerSource||'none';

        if(Array.isArray(l.ndJson)) {
            l.ndJson.forEach((f,i) => {
                let title = `${l.title} [${i+1}/${l.ndJson.length}]`;
                script.write(`echo "Importing ${title}"\n`);
                script.write(`${addScript} -f ./${f} '--layerSource=${l.layerSource}' '--layerName=${title}' '--featureIdFmt=${l.fmt}' '--featureNameFmt=${l.fmt}' '--user=${user}' '--password=${pass}'\n\n`);
            });
        } else {
            script.write(`echo "Importing ${l.title}"\n`);
            script.write(`${addScript} -f ./${l.ndJson} '--layerSource=${l.layerSource}' '--layerName=${l.title}' '--featureIdFmt=${l.fmt}' '--featureNameFmt=${l.fmt}' '--user=${user}' '--password=${pass}'\n\n`);
        }
    });
    script.end();
}

function generate_seed() {
    let rl = readline.createInterface({
                input: process.stdin,
                output: process.stdout
            }),
        previousLayers,
        transforms = require('./lib/transforms')(output_dir,argv);

    if(argv['mergeLayers']) {
        try {
            previousLayers = require(argv['mergeLayers']).reduce((map,l) => {
                map[l.shp] = l;
                return map;
            },{});
        } catch (e) {
            console.log(`Unable to load mergeLayers ${argv['mergeLayers']}`);
            usage();
        }
    }

    function getFmt(props) {
        function get() {
            return new Promise((resolve,reject) => {
                rl.question('Name format: ',(answer) => {
                    try {
                        let example = (new PropertyFormatter(answer)).format(props);
                        resolve(answer);
                    } catch(e) {
                        reject(e);
                    }
                });
            });
        }
        return new Promise(resolve => {
            function tryAgain() {
                get().then(resolve,tryAgain);
            }
            tryAgain();
        });
    }

    (new ShpTitles(new ShpFinder(input_dir)))
    .on('end',map => {
        let shps = Object.keys(map),
            totalShps = shps.length,
            procCnt = 0;

        shps.forEach(shp => {
            // TODO possible to have no title...
            map[shp] = {
                shp: shp,
                title: map[shp]
            };
        });

        // do this work serially to avoid over-taxing the machine
        function nextShp() {
            let shp = shps.shift(),
                record = map[shp];
            console.log();
            console.log(`Processing [${++procCnt}/${totalShps}]: ${path.basename(shp,'.shp')}`);
            transforms.toGeoJson(record)
                .then(transforms.toNdJson)
                .then(transforms.simplifyIfNecessary)
                .then(transforms.splitIfNecessary)
                .then(transforms.cleanup)
                .then(record => {
                    if(shps.length) {
                        return nextShp();
                    }
                    shps = Object.keys(map);
                    console.log(`Processed ${shps.length} shapfiles.`);
                    nextFormat();
                });
        }

        function nextFormat() {
            let shp = shps.shift(),
                record = map[shp],
                ndJson = record.ndJson,
                storeFmt = fmt => {
                    record.fmt = fmt;
                    if(shps.length) {
                        return nextFormat();
                    }
                    // write the results out
                    fs.writeFile(`${output_dir}/layers.json`,JSON.stringify(
                        Object.keys(map).map(shp => map[shp]),null,2),err => {
                        console.log('complete');
                        process.exit(0);
                    });
                }
            if(previousLayers && previousLayers[shp] && previousLayers[shp].fmt) {
                return storeFmt(previousLayers[shp].fmt);
            }
            console.log('');
            console.log('-------------------------------------');
            console.log(`Layer: ${record.title}`);
            for(let prop in record.examplePropertiesAnnotated) {
                let o = record.examplePropertiesAnnotated[prop];
                console.log(`${prop}: ${o.value} [type: ${o.type}, unique: ${o.unique}]`);
            }
            getFmt(record.exampleProperties).then(fmt => {
                storeFmt(fmt);
            });
        }

        // get the ball rolling
        nextShp();
    })
    .find();
}
