#!/usr/bin/env node --preserve-symlinks
var argv = require('minimist')(process.argv.slice(2)),
    AppContainer = require('app-container'),
    layerImport = require('../lib/layer-import'),
    PreProcessorFactory = layerImport.PreProcessorFactory,
    PostProcessorFactory = layerImport.PostProcessorFactory,
    PropertyFormatter = require('../lib/property-formatter'),
    prompt = require('prompt'),
    preProcessor,
    postProcessor;

// deal with any possible duplicate argument names
argv.user = argv.user||argv.u;
argv.password = argv.password||argv.p;

prompt.override = argv;

if(argv.h || argv.help) {
    usage();
}

if(!argv.f) {
    usage('missing required parameter.');
}



// start the ball rolling
preProcessGeoInput();

// pre-process the -f file input
function preProcessGeoInput() {
    preProcessor = PreProcessorFactory({
        filePath: argv.f,
        fork: argv.fork
    });
    preProcessor.on('error',handleError)
                .on('complete',gatherUserInput);
    preProcessor.start();
}

// gather user input
function gatherUserInput(preResults) {
    function testFormatter(fmt) {
        try {
            (new PropertyFormatter(fmt)).format(preResults.exampleProperties);
        } catch (error) {
            return error;
        }
    }
    function formatterConform(v) {
        var error = testFormatter(v);
        if(error) {
            console.error(error);
            return false;
        }
        return true;
    }
    // if all required input is on the commandline then no need to prompt
    if(argv.layerName && argv.featureNameFmt && argv.featureIdFmt && argv.layerSource) {
        if(argv.layerSource === 'none') {
            delete argv.layerSource;
        }
        ['featureIdFmt','featureNameFmt'].forEach((key) => {
            var error = testFormatter(argv[key]);
            if(error) {
                console.error();
                console.error('invalid %s',key);
                console.error();
                console.error(error);
                console.error();
                process.exit(1);
            }
        });
        return importLayer(preResults,argv);
    }
    console.log();
    console.log('Your layer will have %d features.',preResults.featureCount);
    console.log('All features consistently contain the following property names with values.');
    console.log(' (the values are examples collected from the feature input)');
    console.log();
    Object.keys(preResults.examplePropertiesAnnotated).forEach(function(key){
        var o = preResults.examplePropertiesAnnotated[key];
        console.log('%s: %s [type: %s, unique: %b]',key,o.value,o.type,o.unique);
    });
    console.log();
    prompt.get([{
        name: 'layerName',
        description: 'What should this layer be named?',
        required: true
    },{
        name: 'featureIdFmt',
        description: 'Feature Id format?',
        message: 'Invalid property format',
        required: true,
        conform: formatterConform
    },{
        name: 'featureNameFmt',
        description: 'Feature Name format?',
        message: 'Invalid property format',
        required: true,
        conform: formatterConform
    },{
        name: 'layerSource',
        description: 'Where did the data for this layer originate (e.g. web URL)?',
        required: false
    }], function(err,userInput){
        console.log();
        console.log('Your new layer will contain %d features (assuming they can be indexed).',preResults.featureCount);
        console.log('Example Feature Id "%s"',(new PropertyFormatter(userInput.featureIdFmt).format(preResults.exampleProperties)));
        console.log('Example Feature Name "%s"',(new PropertyFormatter(userInput.featureNameFmt).format(preResults.exampleProperties)));
        if(!userInput.layerSource) {
            delete userInput.layerSource;
            console.log('You opted to not identify the source of this layer\'s data');
        } else {
            console.log('You identified "%s" as the source of this layer\'s data.',userInput.layerSource);
        }
        console.log();
        prompt.get([{
            name: 'correct',
            description: 'Does this all sound correct? [y|n]',
            before: function(v) { return v.toLowerCase(); },
            pattern: /y|n/i
        }],function(err,confirmResults){
            if(confirmResults.correct === 'n') {
                gatherUserInput(preResults);
            } else {
                prompt.get([{
                    name: 'continue',
                    description: 'Do you want to continue and import this layer? [y|n]',
                    before: function(v) { return v.toLowerCase(); },
                    pattern: /y|n/i
                }],function(err,continueResults){
                    if(continueResults.continue === 'y') {
                        importLayer(preResults,userInput);
                    }
                });
            }
        });
    });
}

// actually perform the import
function importLayer(preResults,userInput) {
    function login(u,p) {
        AppContainer.login(u,p,function(err,user) {
            if(err) {
                handleError(err);
            }
            if(!user.isAdmin()) {
                console.error('%s is not an administrator account.',user.email);
                process.exit(1);
            }
            // clear out any passwords that may have been supplied
            delete userInput.password;
            delete userInput.p;
            delete userInput.u;
            userInput.userId = user._id.toString();
            postProcessor = PostProcessorFactory({
                preResults: preResults,
                userInput: userInput,
                fork: argv.fork
            });
            postProcessor.on('error',handleError)
                         .on('info',console.log)
                         .on('complete',console.dir);
            postProcessor.start();
        });
    }
    if(argv.user && argv.password) {
        login(argv.user,argv.password);
    } else {
        prompt.get([{
            name: 'user',
            description: 'Username/E-mail',
            required: true
        },{
            name: 'password',
            description: 'Password',
            hidden: true,
            replace: '*',
            required: true
        }],function(err,upResults) {
            login(upResults.user,upResults.password);
        });
    }
}

function usage(msg) {
    if(msg) {
        console.error();
        console.error(msg);
    }
    console.error();
    console.error('add-layer [options] -f <inputFile>');
    console.error('  options:');
    console.error('               --help, -h: display this usage message and exit');
    console.error();
    console.error('          --user, -u: the username to login to the system with (admin role required) (default: prompt)');
    console.error('      --password, -p: the password for --user (default prompt)')
    console.error();
    console.error('         --layerName: the name of the layer to create (default: prompt)');
    console.error('       --layerSource: the source of the data for this layer (e.g. web URL) (default: prompt)');
    console.error('      --featureIdFmt: the feature property used to uniquely identify features within this layer (default: prompt)');
    console.error('                      it is important you pick a property that will remain consistent historically so this layer can be updated if/when things change');
    console.error('    --featureNameFmt: the feature property used to name features within this layer (default: prompt)');
    console.error();
    console.error('  testing options:');
    console.error('              --fork: run work in separate processes (for testing).');
    console.error('         --nocleanup: leave temporary files around (for testing).');
    console.error();
    console.error('  If all standard command-line options are supplied then no user input will be necessary (i.e. unattended).');
    console.error('  if you want to run strictly from command-line arguments but do not have a layerSource to identify specify --layerSource=none');
    console.error();
    process.exit(1);
}

function handleError(error) {
    console.error();
    console.error('error: ',error);
    console.error();
    process.exit(1);
}

process.on('exit',function cleanup() {
    if(preProcessor && !argv.nocleanup) {
        preProcessor.cleanupSync();
        preProcessor = undefined;
    }
});
